col = "steelblue")
plot(density(diffs))
# Setup -----------------------------------------------------------------
# # clearing everything else
# rm(list = ls())
# loading in libraries
library(tidyverse)
library(tidymodels)
library(vroom)
library(patchwork)
library(janitor)
# Reading In Data -------------------------------------------------------
# 1050 columns
amazon_train <- vroom("amazon-employee-access-challenge/train.csv")
setwd("~/GitHub/AmazonEmployeeAccess")
# Setup -----------------------------------------------------------------
# # clearing everything else
# rm(list = ls())
# loading in libraries
library(tidyverse)
library(tidymodels)
library(vroom)
library(patchwork)
library(janitor)
# Reading In Data -------------------------------------------------------
# 1050 columns
amazon_train <- vroom("amazon-employee-access-challenge/train.csv")
amazon_test <- vroom("amazon-employee-access-challenge/test.csv")
# Cleaning Data ---------------------------------------------------------
amazon_cleanup_recipe <- recipe(ACTION ~ .,
data = amazon_train) %>%
step_mutate_at(all_predictors(), fn = factor) %>%
step_other(all_factor_predictors(), threshold = 0.001) #%>%
# step_dummy(all_factor_predictors())
amazon_train_clean <- bake(prep(amazon_cleanup_recipe),
new_data = amazon_train)
# EDA -------------------------------------------------------------------
# getting an introductory view to our data
DataExplorer::plot_intro(amazon_train_clean)
# checking for missing values
DataExplorer::plot_missing(amazon_train_clean)
# there are none!
# getting a general idea of each variable's distribution
DataExplorer::plot_bar(amazon_train_clean)
library(ggmosaic)
install.packages(ggmosaic)
install.packages("ggmosaic")
library(ggmosaic)
ggplot(data = amazon_train_clean) +
geom_mosiac(aes(x = ACTION,
y = ROLE_FAMILY))
library(ggmosaic)
ggplot(data = amazon_train_clean) +
geom_mosiac(aes(x = ACTION,
y = ROLE_FAMILY))
ggplot(data = amazon_train_clean) +
geom_mosaic(aes(x = ACTION,
y = ROLE_FAMILY))
ggplot(data = amazon_train_clean) +
geom_mosaic(aes(fill = ACTION,
x = ROLE_FAMILY))
summary(amazon_train_clean)
ggplot(data = amazon_train_clean) +
geom_mosaic(aes(fill = ACTION,
x = ROLE_FAMILY))
ggplot(data = amazon_train_clean) +
geom_mosaic(aes(fill = ACTION,
x = ROLE_CODE))
ggplot(data = amazon_train_clean) +
geom_barplot(aes(x = aCTION))
ggplot(data = amazon_train_clean) +
geom_barplot(aes(x = ACTION))
ggplot(data = amazon_train_clean) +
geom_bar(aes(x = ACTION))
ggplot(data = amazon_train_clean) +
geom_col(aes(x = ACTION))
ggplot(data = amazon_train_clean) +
geom_bar(aes(x = ACTION))
ggplot(data = amazon_train_clean) +
geom_bar(aes(x = ACTION),
stat = "prop")
ggplot(data = amazon_train_clean) +
geom_bar(aes(x = ACTION),
stat = "p")
ggplot(data = amazon_train_clean) +
geom_bar(aes(x = ACTION),
stat = "proportion")
?geom_bar
ggplot(data = amazon_train_clean) +
geom_bar(aes(x = ACTION),
stat = "density")
ggplot(data = amazon_train_clean) +
geom_bar(aes(x = ACTION),
stat = "count")
ggplot(data = amazon_train_clean) +
geom_bar(aes(x = ACTION),
stat = "proportion")
ggplot(data = amazon_train_clean) +
geom_bar(aes(x = ACTION),
stat = "quantile")
ggplot(data = amazon_train_clean) +
geom_bar(aes(x = ACTION))
ggplot(data = amazon_train_clean) +
geom_bar(aes(x = ROLE_FAMILY))
ggplot(data = amazon_train_clean) +
geom_mosaic(aes(x = ROLE_FAMILY,
fill = ACTION))
ggplot(data = amazon_train_clean, aes(x = ROLE_FAMILY,
fill = ACTION)) +
geom_mosaic()
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = ACTION)) +
geom_mosaic()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = ACTION))
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = ACTION)) +
geom_mosaic()
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_mosaic()
amazon_train_clean <- bake(prep(amazon_cleanup_recipe),
new_data = amazon_train)
View(amazon_train_clean)
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_bar()
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = ACTION)) +
geom_bar()
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_bar()
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_mosaic()
ggplot(data = amazon_train_clean, mapping = aes(fill = ROLE_FAMILY,
x = factor(ACTION))) +
geom_bar()
fill
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_bar()
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_prop()
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_bar()
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_col()
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_bar()
geom_mosiac(fill = ACTION)
geom_mosiac(fill = ACTION)
# Setup -----------------------------------------------------------------
# # clearing everything else
# rm(list = ls())
# loading in libraries
library(tidyverse)
library(tidymodels)
library(vroom)
library(patchwork)
library(janitor)
library(ggmosaic)
# Reading In Data -------------------------------------------------------
# 1050 columns
amazon_train <- vroom("amazon-employee-access-challenge/train.csv")
amazon_test <- vroom("amazon-employee-access-challenge/test.csv")
# Cleaning Data ---------------------------------------------------------
amazon_cleanup_recipe <- recipe(ACTION ~ .,
data = amazon_train) %>%
step_mutate_at(all_predictors(), fn = factor) %>%
step_other(all_factor_predictors(), threshold = 0.001) #%>%
# step_dummy(all_factor_predictors())
amazon_train_clean <- bake(prep(amazon_cleanup_recipe),
new_data = amazon_train)
View(amazon_train_clean)
# EDA -------------------------------------------------------------------
# getting an introductory view to our data
DataExplorer::plot_intro(amazon_train_clean)
# checking for missing values
DataExplorer::plot_missing(amazon_train_clean)
# there are none!
ggplot(data = amazon_train_clean) +
geom_bar(aes(x = ROLE_FAMILY))
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY) +
geom_mosiac(fill = ACTION)
# getting a general idea of each variable's distribution
DataExplorer::plot_bar(amazon_train_clean)
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_mosiac(fill = ACTION)
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_mosaic(fill = ACTION)
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_mosaic(fill = amazon_train_clean$ACTION)
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_mosaic(aes(fill = amazon_train_clean$ACTION))
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_mosaic(aes(fill = ACTION))
rlang::last_trace()
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_mosaic(aes(fill = ACTION))
summary(amazon_train_clean)
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_mosaic(aes(fill = factor(ACTION)))
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_mosaic(aes(fill = ACTION))
ggplot(data = amazon_train_clean, mapping = aes(x = numeric(ROLE_FAMILY))) +
geom_mosaic(aes(fill = ACTION))
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_mosaic(aes(fill = ACTION))
?geom_mosaic
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_mosaic(aes(x = ROLE_FAMILY,
fill = ACTION))
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_mosaic(aes(fill = ACTION))
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_bar(aes(fill = ACTION))
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY)) +
geom_bar(fill = ACTION)
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = ACTION)) +
geom_bar()
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_bar()
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_mosaic()
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_mosaic(inherit.aes = T)
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_mosaic(inherit.aes = F)
ggplot(data = amazon_train_clean, mapping = aes(x = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_bar()
ggplot(data = amazon_train_clean, mapping = aes(y = ROLE_FAMILY,
fill = factor(ACTION))) +
geom_bar()
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = unique) %>%
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = unique)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = unique)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = unique) %>%
apply(X = ., MARGIN = 2, FUN = count)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = unique) %>%
apply(X = ., MARGIN = 2, FUN = length)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = unique) %>%
apply(X = ., MARGIN = 2, FUN = n())
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = count(unique()))
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = count(unique))
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = unique)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = unique) %>%
summary(.)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = unique) %>%
apply(X = ., MARGIN = 2, FUN = unique)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = unique) %>%
apply(X = ., MARGIN = 2, FUN = length)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = levels) %>%
apply(X = ., MARGIN = 2, FUN = length)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = levels)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = length)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = unique)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = unique.data.frame)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = unique)
return(length(unique(x)))
num_unique <- function(x){
return(length(unique(x)))
}
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
pivot_longer()
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
pivot_longer(cols = 1:10)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
pivot_longer(cols = 1:10,
names_to = "class")
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame(.)
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame()
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame() %>%
ggplot(mapping = aes(y = .))
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame() %>%
ggplot(mapping = aes(y = .)) +
geom_bar()
# looking at number of unique values of each column
amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame() %>%
ggplot(mapping = aes(x = .)) +
geom_bar()
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame()
uniques
names(uniques)
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique)
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique)
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique)
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique)
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
plot()
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
plot(type = "l")
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
plot(type = "h")
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
plot(type = "h")
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
plot(type = "h") +
xlab("variable number")
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
plot(type = "h")
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
ggplot(mapping = aes(y = .))
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame(.) %>%
ggplot(mapping = aes(y = .))
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame(.) %>%
mutate(category = factor(., levels = labels))
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame(.) %>%
mutate(category = factor(., levels = labels))
mutate(category = factor(.)
mutate(category = factor(.) %>%
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame(.) %>%
mutate(category = factor(.)) %>%
ggplot(mapping = aes(y = .))
uniques
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame(.) %>%
mutate(category = factor(., levels =  labels)) %>%
ggplot(mapping = aes(y = .))
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame(.) %>%
ggplot(mapping = aes(y = .))
uniques
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame(.) %>%
ggplot(mapping = aes(y = .)) +
geom_col()
uniques
names(amazon_train_clean)
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
as.data.frame(.) %>%
ggplot(mapping = aes(y = .)) +
geom_col(x = names(amazon_train_clean))
uniques
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
cbind(names(amazon_train_clean))
uniques
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
cbind(names(amazon_train_clean)) %>%
mutate(. = as.numeric(.))
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
cbind(names(amazon_train_clean)) %>%
mutate(. = as.numeric(.)) %>%
as.data.frame(.) %>%
ggplot(mapping = aes(y = .)) +
geom_col(x = names(amazon_train_clean))
uniques
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
cbind(names(amazon_train_clean)) %>%
as.data.frame(.) %>%
mutate(. = as.numeric(.))
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
cbind(names(amazon_train_clean)) %>%
as.data.frame(.)
uniques
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
cbind(names(amazon_train_clean)) %>%
as.data.frame(.) %>%
mutate(. = as.numeric(.))
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
cbind(names(amazon_train_clean)) %>%
as.data.frame(.)
uniques
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
cbind(names(amazon_train_clean)) %>%
as.data.frame(.) %>%
ggplot(mapping = aes(y = .,
x = V2)) +
geom_bar()
uniques
# looking at number of unique values of each column
uniques <- amazon_train_clean %>%
apply(X = ., MARGIN = 2, FUN = num_unique) %>%
cbind(names(amazon_train_clean)) %>%
as.data.frame(.) %>%
ggplot(mapping = aes(y = .,
x = V2)) +
geom_col()
uniques
