na = c("NA"),
trim_ws = T)
# cleaning healthy volunteer data
volunteers_clean <- volunteers %>%
mutate(LPS = as.numeric(str_sub(`LPS `, end = -2L)),
PAM3CSK4 = as.numeric(str_sub(`PAM3CSK4 `, end = -2L)),
Identifier = str_sub(`Identifier `, end = -2L)) %>%
# removing ten healthy volunteers
filter(!Identifier %in% c("BR", "CDS", "DB", "DD", "DG",
"LC", "MD" , "MG", "NB", "TJR" )) %>%
select(LPS, PAM3CSK4)
# cutoffs between SMI groups
low_cutoff <- 10
high_cutoff <- 12
# plotting ICU absolute measurement over time
ICU_clean_use %>%
filter(time <= 72) %>%
mutate(survived = factor(survived == 0,
levels = c(FALSE, TRUE),
labels = c("Survival", "Mortality"))) %>%
ggplot(aes(x = time,
y = measurement)) +
# geom_hline(yintercept = c(low_cutoff, high_cutoff),
#            linewidth = 2) +
geom_line(aes(group = patient,
color = survived),
alpha = 0.6) +
geom_point(aes(color = survived),
size = 2.5) +
ggtitle(label = "SMI vs Time For ICU patients") +
xlab("Time Since ICU Admission (hrs)") +
ylab("SMI") +
labs(color = "Outcome") +
scale_y_continuous(limits = c(0, 16))
cutoff = 8
hist(volunteers_clean$LPS)
abline(v = (cutoff),
col = "steelblue",
lwd = 5)
hist(volunteers_clean$PAM3CSK4)
abline(v = (cutoff),
col = "steelblue",
lwd = 5)
volunteers_clean %>%
mutate(Risk = case_when(((LPS + PAM3CSK4) / 2 >= 8) ~ "High (>=8)",
TRUE ~ "Low (<8)")) %>%
drop_na() %>%
ggplot(aes(x = LPS,
y = PAM3CSK4)) +
geom_hline(yintercept = cutoff,
linewidth = 2,
color = "gray") +
geom_vline(xintercept = cutoff,
linewidth = 2,
color = "gray") +
geom_point(aes(color = Risk),
size = 2.2) +
labs(title = "SMI After 24 hrs Incubation",
subtitle = "For Blood Samples Taken From Healthy Volunteers",
x = "SMI After Incubation in LPS",
y = "SMI After Incubation in PAM3CSK4",
caption = "R^2 = 0.2801091") +
scale_x_continuous(limits = c(0, 18)) +
scale_y_continuous(limits = c(0, 18)) +
geom_smooth(method = "lm",
se = F,
color = "steelblue")
# preparing volunteer data to join data sets
volunteers_join <- volunteers_clean %>%
mutate(
# adding patient identifier to volunteer sheet
patient = (19:(18 + dim(volunteers_clean[1])))) %>%
mutate(
# adding "healthy" identifier
survived = "Healthy",
# averaging the two SMI measurements
measurement = mean(c(LPS, PAM3CSK4), na.rm = T),
.by = patient
) %>%
# selecting columns for joining
select(patient, survived, measurement)
# preparing ICU data to join data sets
ICU_join <- ICU_clean_use %>%
# filtering to just baseline measurements
filter(time == 0) %>%
# selecting columns for joining
select(patient, survived, measurement)
# joining data sets
full_workbook <- full_join(ICU_join, volunteers_join,
by = c("patient", "survived", "measurement"))
full_workbook %>%
filter(survived %in% c(0, 1)) %>%
mutate(
group = factor(survived == 1,
levels = c(FALSE, TRUE),
labels = c("Mortality", "Survived"))
) %>%
ggplot(aes(x = measurement,
y = group)) +
geom_boxplot() +
geom_jitter(width = 0,
height = 0.07,
color = "steelblue",
size = 2) +
labs(title = "SMI At Hospital Admission vs. Survival",
subtitle = "For ICU Patients With Sepsis",
x = "SMI At Admission",
y = "Group")
# separating ICU patients into 2 groups for tests on baseline values
survivors <- ICU_clean_use %>%
filter(time == 0, survived == 1)
mortality <- ICU_clean_use %>%
filter(time == 0, survived == 0)
# Mann-Whitney U-test of baseline values
# for survived and mortality groups
wilcox.test(x = survivors$measurement,
y = mortality$measurement,
paired = FALSE,
alternative = "less")
# p-value = 0.02262
# One-sided t-test on mean baseline SMI values
# for survived and mortality groups
t.test(x = survivors$measurement,
y = mortality$measurement,
paired = FALSE,
alternative = "less",
var.equal = FALSE)
# p = 0.04317
ICU_clean_use %>%
mutate(
SMI_higher_than_baseline = change > 0,
survived = survived,
level = case_when(
measurement < low_cutoff ~ "Low",
measurement < high_cutoff ~ "Intermediate",
measurement >= high_cutoff ~ "High",
TRUE ~ NA)) %>%
summarize(
survival = sum(survived == 1),
mortality = sum(survived == 0),
.by = c(time, level, SMI_higher_than_baseline)
) %>%
filter(time == 12) %>%
summarize(
survival = sum(survival),
mortality = sum(mortality),
.by = SMI_higher_than_baseline
) %>%
select(survival, mortality) %>%
rbind(1) %>%
as.matrix(.) %>%
`rownames<-`(., c("SMI at 12 hrs greater than baseline",
"SMI at 12 hrs less than baseline",
"No SMI Measurement at 12 hrs")) %>%
kable()
# fisher test on whether > baseline after 12 hrs
ICU_clean_use %>%
mutate(
SMI_higher_than_baseline = change > 0,
survived = survived,
level = case_when(
measurement < low_cutoff ~ "Low",
measurement < high_cutoff ~ "Intermediate",
measurement >= high_cutoff ~ "High",
TRUE ~ NA)) %>%
summarize(
survival = sum(survived == 1),
mortality = sum(survived == 0),
.by = c(time, level, SMI_higher_than_baseline)
) %>%
filter(time == 12) %>%
summarize(
survival = sum(survival),
mortality = sum(mortality),
.by = SMI_higher_than_baseline
) %>%
select(survival, mortality) %>%
fisher.test(.,
alternative = "greater")
# p = 0.002747
full_workbook %>%
mutate(
group = factor(survived == "Healthy",
levels = c(FALSE, TRUE),
labels = c("ICU", "Incubated"))
) %>%
ggplot(aes(x = measurement,
y = group)) +
geom_boxplot() +
geom_jitter(color = "steelblue",
width = 0,
height = 0.07,
size = 2) +
labs(title = "SMI for Pathogenically Incubated Blood vs. ICU Patients With Sepsis",
x = "SMI",
y = "Group")
# Mann-Whitney U-test of baseline values for survived and mortality groups
wilcox.test(x = volunteers_join$measurement,
y = ICU_join$measurement,
paired = FALSE)
# p-value = 9.313e-05
# t-test on mean baseline SMI values for survived and mortality groups
t.test(x = volunteers_join$measurement,
y = ICU_join$measurement,
paired = FALSE,
var.equal = FALSE)
# p = 2.573e-05
full_workbook %>%
mutate(
group = factor(survived == "Healthy",
levels = c(FALSE, TRUE),
labels = c("ICU", "Incubated")),
Risk = case_when(measurement >= 8 ~ "High (>=8)",
TRUE ~ "Low (<8)")
) %>%
ggplot(aes(x = measurement,
y = group)) +
geom_boxplot() +
geom_jitter(aes(color = Risk),
width = 0,
height = 0.07,
size = 2) +
labs(title = "SMI for Pathogenically Incubated Blood vs. ICU Patients With Sepsis",
x = "SMI",
y = "Group")
full_workbook %>%
mutate(
group = factor(survived == "Healthy",
levels = c(FALSE, TRUE),
labels = c("ICU", "Incubated"))
) %>%
filter(measurement >= 8) %>%
ggplot(aes(x = measurement,
y = group)) +
geom_boxplot() +
geom_jitter(color = "steelblue",
width = 0,
height = 0.07,
size = 2) +
labs(title = "SMI for Pathogenically Incubated Blood vs. ICU Patients With Sepsis",
subtitle = "Showing only SMI >= 8",
x = "SMI",
y = "Group")
# Mann-Whitney U-test of baseline values for survived and mortality groups
wilcox.test(x = volunteers_join$measurement[volunteers_join$measurement >= 8],
y = ICU_join$measurement[ICU_join$measurement >= 8],
paired = FALSE)
# p = 0.1798
# t-test on mean baseline SMI values for survived and mortality groups
t.test(x = volunteers_join$measurement[volunteers_join$measurement >= 8],
y = ICU_join$measurement[ICU_join$measurement >= 8],
paired = FALSE,
var.equal = FALSE)
# p = 0.124
compare_LPS <- volunteers_clean %>%
mutate(
# adding patient identifier to volunteer sheet
patient = (19:(18 + dim(volunteers_clean[1])))) %>%
mutate(
# adding "healthy" identifier
survived = "Healthy",
measurement = LPS) %>%
select(patient, survived, measurement) %>%
full_join(ICU_join,
by = c("patient", "survived", "measurement")) %>%
mutate(
group = factor(survived == "Healthy",
levels = c(FALSE, TRUE),
labels = c("ICU", "LPS")),
Risk = case_when(measurement >= 8 ~ "High (>=8)",
TRUE ~ "Low (<8)")
)
compare_LPS %>%
ggplot(aes(x = measurement,
y = group)) +
geom_boxplot() +
geom_jitter(aes(color = Risk),
width = 0,
height = 0.07,
size = 2) +
labs(title = "SMI for LPS Incubated Blood vs. ICU Patients With Sepsis",
x = "SMI",
y = "Group")
compare_LPS  %>%
mutate(
group = factor(survived == "Healthy",
levels = c(FALSE, TRUE),
labels = c("ICU", "LPS"))
) %>%
filter(measurement >= 8) %>%
ggplot(aes(x = measurement,
y = group)) +
geom_boxplot() +
geom_jitter(color = "steelblue",
width = 0,
height = 0.07,
size = 2) +
labs(title = "SMI for LPS Incubated Blood vs. ICU Patients With Sepsis",
subtitle = "Showing only SMI >= 8",
x = "SMI",
y = "Group")
# Mann-Whitney U-test of baseline values for survived and mortality groups
wilcox.test(x = volunteers_clean$LPS[volunteers_clean$LPS >= 8],
y = ICU_join$measurement[ICU_join$measurement >= 8],
paired = FALSE)
# p = 0.4641
# t-test on mean baseline SMI values for survived and mortality groups
t.test(x = volunteers_clean$LPS[volunteers_clean$LPS  >= 8],
y = ICU_join$measurement[ICU_join$measurement >= 8],
paired = FALSE,
var.equal = FALSE)
# p = 0.5161
compare_PAM3CSK4 <- volunteers_clean %>%
mutate(
# adding patient identifier to volunteer sheet
patient = (19:(18 + dim(volunteers_clean[1])))) %>%
mutate(
# adding "healthy" identifier
survived = "Healthy",
measurement = PAM3CSK4) %>%
select(patient, survived, measurement) %>%
full_join(ICU_join,
by = c("patient", "survived", "measurement")) %>%
mutate(
group = factor(survived == "Healthy",
levels = c(FALSE, TRUE),
labels = c("ICU", "PAM3CSK4")),
Risk = case_when(measurement >= 8 ~ "High (>=8)",
TRUE ~ "Low (<8)")
)
compare_PAM3CSK4 %>%
ggplot(aes(x = measurement,
y = group)) +
geom_boxplot() +
geom_jitter(aes(color = Risk),
width = 0,
height = 0.07,
size = 2) +
labs(title = "SMI for PAM3CSK4 Incubated Blood vs. ICU Patients With Sepsis",
x = "SMI",
y = "Group")
compare_PAM3CSK4  %>%
mutate(
group = factor(survived == "Healthy",
levels = c(FALSE, TRUE),
labels = c("ICU", "PAM3CSK4"))
) %>%
filter(measurement >= 8) %>%
ggplot(aes(x = measurement,
y = group)) +
geom_boxplot() +
geom_jitter(color = "steelblue",
width = 0,
height = 0.07,
size = 2) +
labs(title = "SMI for PAM3CSK4 Incubated Blood vs. ICU Patients With Sepsis",
subtitle = "Showing only SMI >= 8",
x = "SMI",
y = "Group")
# Mann-Whitney U-test of baseline values for survived and mortality groups
wilcox.test(x = volunteers_clean$PAM3CSK4[volunteers_clean$PAM3CSK4 >= 8],
y = ICU_join$measurement[ICU_join$measurement >= 8],
paired = FALSE)
# p = 0.3307
full_workbook %>%
mutate(
group = factor(survived == "Healthy",
levels = c(FALSE, TRUE),
labels = c("ICU", "Incubated")),
Risk = case_when(measurement >= 8 ~ "High (>=8)",
TRUE ~ "Low (<8)")
) %>%
ggplot(aes(x = measurement,
y = group)) +
geom_boxplot() +
geom_jitter(aes(color = Risk),
width = 0,
height = 0.07,
size = 2) +
labs(title = "SMI for Pathogenically Incubated Blood vs. ICU Patients With Sepsis",
x = "SMI",
y = "Group")
full_workbook %>%
mutate(
group = factor(survived == "Healthy",
levels = c(FALSE, TRUE),
labels = c("ICU", "Incubated"))
) %>%
filter(measurement >= 8) %>%
ggplot(aes(x = measurement,
y = group)) +
geom_boxplot() +
geom_jitter(color = "steelblue",
width = 0,
height = 0.07,
size = 2) +
labs(title = "SMI for Pathogenically Incubated Blood vs. ICU Patients With Sepsis",
subtitle = "Showing only SMI >= 8",
x = "SMI",
y = "Group")
cutoff = 8
hist(volunteers_clean$LPS)
abline(v = (cutoff),
col = "steelblue",
lwd = 5)
hist(volunteers_clean$PAM3CSK4)
abline(v = (cutoff),
col = "steelblue",
lwd = 5)
volunteers_clean %>%
mutate(Risk = case_when(((LPS + PAM3CSK4) / 2 >= 8) ~ "High (>=8)",
TRUE ~ "Low (<8)")) %>%
drop_na() %>%
ggplot(aes(x = LPS,
y = PAM3CSK4)) +
geom_hline(yintercept = cutoff,
linewidth = 2,
color = "gray") +
geom_vline(xintercept = cutoff,
linewidth = 2,
color = "gray") +
geom_point(aes(color = Risk),
size = 2.2) +
labs(title = "SMI After 24 hrs Incubation",
subtitle = "For Blood Samples Taken From Healthy Volunteers",
x = "SMI After Incubation in LPS",
y = "SMI After Incubation in PAM3CSK4",
caption = "R^2 = 0.2801091") +
scale_x_continuous(limits = c(0, 18)) +
scale_y_continuous(limits = c(0, 18)) +
geom_smooth(method = "lm",
se = F,
color = "steelblue")
# Penalized linear regression model -------------------------------------
amazon_penalized_logistic_model <- logistic_reg(mixture = tune(),
penalty = tune()) %>%
set_engine("glmnet")
# Setup -----------------------------------------------------------------
# clearing everything
rm(list = ls())
# loading in libraries
library(tidyverse)
library(tidymodels)
library(vroom)
# Reading In Data -------------------------------------------------------
# 1050 columns
amazon_train <- vroom("amazon-employee-access-challenge/train.csv") %>%
mutate(ACTION = factor(ACTION))
setwd("~/GitHub/AmazonEmployeeAccess")
# Reading In Data -------------------------------------------------------
# 1050 columns
amazon_train <- vroom("amazon-employee-access-challenge/train.csv") %>%
mutate(ACTION = factor(ACTION))
amazon_test <- vroom("amazon-employee-access-challenge/test.csv")
amazon_cleanup_recipe <- recipe(ACTION ~ .,
data = amazon_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>%
step_other(all_factor_predictors(), threshold = 0.01) %>%
step_dummy(all_factor_predictors())
# Penalized linear regression model -------------------------------------
amazon_penalized_logistic_model <- logistic_reg(mixture = tune(),
penalty = tune()) %>%
set_engine("glmnet")
amazon_preliminary_workflow <- workflow %>%
add_recipe(amazon_cleanup_recipe) %>%
add_model(amazon_penalized_logistic_model)
amazon_preliminary_workflow <- workflow() %>%
add_recipe(amazon_cleanup_recipe) %>%
add_model(amazon_penalized_logistic_model)
amazon_cleanup_recipe <- recipe(ACTION ~ .,
data = amazon_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>%
step_other(all_factor_predictors(), threshold = 0.01) %>%
step_dummy(all_factor_predictors()) %>%
step_normalize(all_numeric_predictors)
# Penalized linear regression model -------------------------------------
amazon_penalized_logistic_model <- logistic_reg(mixture = tune(),
penalty = tune()) %>%
set_engine("glmnet")
amazon_preliminary_workflow <- workflow() %>%
add_recipe(amazon_cleanup_recipe) %>%
add_model(amazon_penalized_logistic_model)
amazon_cleanup_recipe <- recipe(ACTION ~ .,
data = amazon_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>%
step_other(all_factor_predictors(), threshold = 0.001) %>%
step_lencode_mixed(all_factor_predictors(), outcome = vars(ACTION)) %>%
step_normalize(all_numeric_predictors)
# loading in libraries
library(tidyverse)
library(tidymodels)
library(vroom)
# Reading In Data -------------------------------------------------------
# 1050 columns
amazon_train <- vroom("amazon-employee-access-challenge/train.csv") %>%
mutate(ACTION = factor(ACTION))
amazon_test <- vroom("amazon-employee-access-challenge/test.csv")
amazon_cleanup_recipe <- recipe(ACTION ~ .,
data = amazon_train) %>%
step_mutate_at(all_numeric_predictors(), fn = factor) %>%
step_other(all_factor_predictors(), threshold = 0.001) %>%
step_lencode_mixed(all_factor_predictors(), outcome = vars(ACTION)) %>%
step_normalize(all_numeric_predictors)
install.packages("embed")
# Setup -----------------------------------------------------------------
# clearing everything
rm(list = ls())
# loading in libraries
library(tidyverse)
library(tidymodels)
library(embed)
install.packages("embed")
